#pragma once

#include "am_traj.hpp"
//#include <planners/wayp_reader.h>

#include <iostream>
#include <stdio.h>
#include <math.h>
#include <Eigen/Eigen>
#include <stdlib.h>

using namespace std;
using namespace Eigen;
//using namespace min_jerk;

/*
// Generate Trajectory by waypoints.txt
*/
class TrajectoryGenerator_fast
{
    private:
        double MaxVel, MaxVelCal;
        double Acc = 5.0;

        Matrix3d iS, fS;        // xyz * pva        // intial & finial state

        // min_jerk::JerkOpt jerkOpt;              // optimizer
        // min_jerk::Trajectory minJerkTraj;       // trajectory generated by optimizer
        //JerkOpt jerkOpt;              // optimizer
      //  Trajectory minJerkTraj;       // trajectory generated by optimizer
        
       // WayPointsReader waypGen;        // read waypoints from txt

        VectorXd allocateTime(const MatrixXd &wayPs, double vel, double acc);
        void get_wPs(const MatrixXd &waypoints, const MatrixXd &cd_c, const VectorXd &cd_r,const Vector3d &start);
        bool get_new_wps(Trajectory traj, const MatrixXd &cd_c, const VectorXd &cd_r);
     //   bool check_traj_safe(const MatrixXd &cd_c, VectorXd &cd_r);
        void update_wps(const vector<Vector3d> &out_centers, const MatrixXd &cd_c, const VectorXd &cd_r);
        int get_insert_ind(const Vector3d &check_c);
        int get_insert_ind_1(const Vector3d &check_c, const MatrixXd &cd_c, const VectorXd &cd_r);
        bool safe_check(const Vector3d pos, const MatrixXd &cd_c,const  VectorXd &cd_r);
        void sort_vec(const VectorXd& vec, VectorXd& sorted_vec,  VectorXi& ind);
    public:
//         MatrixXd waypoints;    // pva * time
        Trajectory traj;
        VectorXd ts;        // time for pieces
        VectorXf bound;
        vector<Vector3d> wPs;
        double total_t;
        int check_sfc_ind;
        bool check_traj_safe(const MatrixXd &cd_c, const VectorXd &cd_r, const double start_t);
        void replan_traj(double MAXVEL,Vector3d start,Vector3d vi,Vector3d ai,MatrixXd wPs,MatrixXd cd_c,VectorXd cd_r);
        double generate();
        int N;
        void get_desire(double timee, Vector3d &p_d, Vector3d &v_d, Vector3d &a_d, Vector3d &p_d_yaw);
        void get_traj_samples(MatrixXd &sp_pos, MatrixXd &sp_vel, MatrixXd &sp_acc, double start_t);
};